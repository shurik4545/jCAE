Gain many time in pick color.

Additionnal information at http://www.vtk.org/Bug/view.php?id=7111
---

 Rendering/vtkOpenGLDisplayListPainter.cxx |   15 +++++++++++----
 Rendering/vtkPainter.cxx                  |    5 +++++
 Rendering/vtkPainter.h                    |   17 +++++++++++++++++
 Rendering/vtkRenderer.cxx                 |    2 ++
 Rendering/vtkRenderer.h                   |    4 ++++
 5 files changed, 39 insertions(+), 4 deletions(-)


diff --git a/Rendering/vtkOpenGLDisplayListPainter.cxx b/Rendering/vtkOpenGLDisplayListPainter.cxx
index fe33f58..81fb9a0 100644
--- a/Rendering/vtkOpenGLDisplayListPainter.cxx
+++ b/Rendering/vtkOpenGLDisplayListPainter.cxx
@@ -109,7 +109,13 @@ void vtkOpenGLDisplayListPainter::RenderInternal(vtkRenderer *renderer,
                                                  unsigned long typeflags,
                                                  bool forceCompileOnly)
 {
-  if (this->GetMTime() > this->Internals->BuildTime ||
+  long time = this->GetPreviousRenderingForSelection();
+  if(time == 0)
+      time = this->Internals->BuildTime;
+  else
+    time = renderer->GetRenderTime();
+
+  if ((this->GetMTime() > time && time == this->Internals->BuildTime) ||
     (this->LastWindow && (renderer->GetRenderWindow() != this->LastWindow.GetPointer())))
     {
     // MTime changes when input changes or someother iVar changes, so display
@@ -138,11 +144,12 @@ void vtkOpenGLDisplayListPainter::RenderInternal(vtkRenderer *renderer,
   // typeflags are obsolete.
   if (
     // Since input changed
-    input->GetMTime() > this->Internals->BuildTime  ||
+    input->GetMTime() > time ||
     // actor's properties were modified
-    actor->GetProperty()->GetMTime() > this->Internals->BuildTime ||
+    actor->GetProperty()->GetMTime() > time ||
     // mapper information was modified
-    this->Information->GetMTime() > this->Internals->BuildTime)
+    //this->Information->GetMTime() > this->Internals->BuildTime
+    false)
     {
     this->Internals->ReleaseAllLists();
     }
diff --git a/Rendering/vtkPainter.cxx b/Rendering/vtkPainter.cxx
index 0e24142..d1cd945 100644
--- a/Rendering/vtkPainter.cxx
+++ b/Rendering/vtkPainter.cxx
@@ -85,6 +85,8 @@ vtkPainter::vtkPainter()
   this->SetInformation(temp);
   temp->Delete();
 
+  this->PreviousRenderingForSelection = 0;
+
   vtkPainter::STATIC_DATA()->Set(this->Information, 0);
   vtkPainter::CONSERVE_MEMORY()->Set(this->Information, 0);
   vtkPainter::HIGH_QUALITY()->Set(this->Information, 1);
@@ -211,6 +213,9 @@ void vtkPainter::Render(vtkRenderer* renderer, vtkActor* actor,
 
   this->PrepareForRendering(renderer, actor);
   this->RenderInternal(renderer, actor, typeflags,forceCompileOnly);
+
+  // If the previous rendering selection information exist remove it
+  SetPreviousRenderingForSelection(0);
 }
 
 //-----------------------------------------------------------------------------
diff --git a/Rendering/vtkPainter.h b/Rendering/vtkPainter.h
index f22a2de..859d86e 100644
--- a/Rendering/vtkPainter.h
+++ b/Rendering/vtkPainter.h
@@ -149,6 +149,21 @@ public:
   virtual vtkDataObject* GetOutput()
     { return this->Input; }
 
+  // Description:
+  // If you're making a selection rendering please add the TimeStamp time of the
+  // selection rendering.
+  // If the value is equal to zero then the previous rendering is not a selection rendering.
+  // If the value is different of zero then the previous rendering was a selection rendering.
+  void SetPreviousRenderingForSelection(int value)
+  {
+    this->PreviousRenderingForSelection = value;
+  }
+
+  int GetPreviousRenderingForSelection()
+  {
+    return this->PreviousRenderingForSelection;
+  }
+
 //BTX
 protected:
   vtkPainter();
@@ -236,6 +251,8 @@ protected:
 
   double TimeToDraw;
   vtkTimerLog* Timer;
+
+  int PreviousRenderingForSelection;
   
   vtkWeakPointer<vtkWindow> LastWindow; // Window used for previous render.
                          // This is not reference counted.
diff --git a/Rendering/vtkRenderer.cxx b/Rendering/vtkRenderer.cxx
index 5cd44ff..a0a0930 100644
--- a/Rendering/vtkRenderer.cxx
+++ b/Rendering/vtkRenderer.cxx
@@ -1946,6 +1946,8 @@ void vtkRenderer::SwapOutSelectablePainter(
       {
       orig_mapper->SetPainter(orig_painter);
       orig_painter->UnRegister(this);
+      // Inform the painters that this rendering is a selection rendering
+      orig_painter->SetPreviousRenderingForSelection(orig_mapper->GetMTime());
       }
     }
   if (!orig_painter)
diff --git a/Rendering/vtkRenderer.h b/Rendering/vtkRenderer.h
index 352e12e..3e1e726 100644
--- a/Rendering/vtkRenderer.h
+++ b/Rendering/vtkRenderer.h
@@ -441,6 +441,10 @@ public:
   vtkGetMacro(LastRenderingUsedDepthPeeling,int);
   
   // Description:
+  // Last render time
+  vtkGetMacro(RenderTime,int);
+
+  // Description:
   // Set/Get a custom Render call. Allows to hook a Render call from an
   // external project.It will be used in place of vtkRenderer::Render() if it
   // is not NULL and its Used ivar is set to true.
