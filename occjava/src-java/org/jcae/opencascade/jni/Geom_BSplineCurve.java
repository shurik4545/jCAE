/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.jcae.opencascade.jni;

public class Geom_BSplineCurve extends Geom_BoundedCurve {
  private long swigCPtr;

  public Geom_BSplineCurve(long cPtr, boolean cMemoryOwn) {
    super(OccJavaJNI.Geom_BSplineCurve_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Geom_BSplineCurve obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OccJavaJNI.delete_Geom_BSplineCurve(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Geom_BSplineCurve(double[] Poles, double[] Knots, int[] Multiplicities, int Degree, boolean Periodic) {
    this(OccJavaJNI.new_Geom_BSplineCurve__SWIG_0(Poles, Knots, Multiplicities, Degree, Periodic), true);
  }

  public Geom_BSplineCurve(double[] Poles, double[] Knots, int[] Multiplicities, int Degree) {
    this(OccJavaJNI.new_Geom_BSplineCurve__SWIG_1(Poles, Knots, Multiplicities, Degree), true);
  }

  public Geom_BSplineCurve(double[] Poles, double[] Weights, double[] Knots, int[] Multiplicities, int Degree, boolean Periodic, boolean CheckRational) {
    this(OccJavaJNI.new_Geom_BSplineCurve__SWIG_2(Poles, Weights, Knots, Multiplicities, Degree, Periodic, CheckRational), true);
  }

  public Geom_BSplineCurve(double[] Poles, double[] Weights, double[] Knots, int[] Multiplicities, int Degree, boolean Periodic) {
    this(OccJavaJNI.new_Geom_BSplineCurve__SWIG_3(Poles, Weights, Knots, Multiplicities, Degree, Periodic), true);
  }

  public Geom_BSplineCurve(double[] Poles, double[] Weights, double[] Knots, int[] Multiplicities, int Degree) {
    this(OccJavaJNI.new_Geom_BSplineCurve__SWIG_4(Poles, Weights, Knots, Multiplicities, Degree), true);
  }

  public void IncreaseDegree(int Degree) {
    OccJavaJNI.Geom_BSplineCurve_IncreaseDegree(swigCPtr, this, Degree);
  }

  public void IncreaseMultiplicity(int Index, int M) {
    OccJavaJNI.Geom_BSplineCurve_IncreaseMultiplicity__SWIG_0(swigCPtr, this, Index, M);
  }

  public void IncreaseMultiplicity(int I1, int I2, int M) {
    OccJavaJNI.Geom_BSplineCurve_IncreaseMultiplicity__SWIG_1(swigCPtr, this, I1, I2, M);
  }

  public void IncrementMultiplicity(int I1, int I2, int M) {
    OccJavaJNI.Geom_BSplineCurve_IncrementMultiplicity(swigCPtr, this, I1, I2, M);
  }

  public void InsertKnot(double U, int M, double ParametricTolerance, boolean Add) {
    OccJavaJNI.Geom_BSplineCurve_InsertKnot__SWIG_0(swigCPtr, this, U, M, ParametricTolerance, Add);
  }

  public void InsertKnot(double U, int M, double ParametricTolerance) {
    OccJavaJNI.Geom_BSplineCurve_InsertKnot__SWIG_1(swigCPtr, this, U, M, ParametricTolerance);
  }

  public void InsertKnot(double U, int M) {
    OccJavaJNI.Geom_BSplineCurve_InsertKnot__SWIG_2(swigCPtr, this, U, M);
  }

  public void InsertKnot(double U) {
    OccJavaJNI.Geom_BSplineCurve_InsertKnot__SWIG_3(swigCPtr, this, U);
  }

  public void InsertKnots(double[] Knots, int[] Mults, double ParametricTolerance, boolean Add) {
    OccJavaJNI.Geom_BSplineCurve_InsertKnots__SWIG_0(swigCPtr, this, Knots, Mults, ParametricTolerance, Add);
  }

  public void InsertKnots(double[] Knots, int[] Mults, double ParametricTolerance) {
    OccJavaJNI.Geom_BSplineCurve_InsertKnots__SWIG_1(swigCPtr, this, Knots, Mults, ParametricTolerance);
  }

  public void InsertKnots(double[] Knots, int[] Mults) {
    OccJavaJNI.Geom_BSplineCurve_InsertKnots__SWIG_2(swigCPtr, this, Knots, Mults);
  }

  public boolean RemoveKnot(int Index, int M, double Tolerance) {
	return OccJavaJNI.Geom_BSplineCurve_RemoveKnot(swigCPtr, this, Index, M, Tolerance);
}

  public void Reverse() {
    OccJavaJNI.Geom_BSplineCurve_Reverse(swigCPtr, this);
  }

  public double ReversedParameter(double U) {
    return OccJavaJNI.Geom_BSplineCurve_ReversedParameter(swigCPtr, this, U);
  }

  public void Segment(double U1, double U2) {
    OccJavaJNI.Geom_BSplineCurve_Segment(swigCPtr, this, U1, U2);
  }

  public void SetKnot(int Index, double K) {
    OccJavaJNI.Geom_BSplineCurve_SetKnot__SWIG_0(swigCPtr, this, Index, K);
  }

  public void SetKnots(double[] K) {
    OccJavaJNI.Geom_BSplineCurve_SetKnots(swigCPtr, this, K);
  }

  public void SetKnot(int Index, double K, int M) {
    OccJavaJNI.Geom_BSplineCurve_SetKnot__SWIG_1(swigCPtr, this, Index, K, M);
  }

  public void PeriodicNormalization(double[] U) {
    OccJavaJNI.Geom_BSplineCurve_PeriodicNormalization(swigCPtr, this, U);
  }

  public void SetPeriodic() {
    OccJavaJNI.Geom_BSplineCurve_SetPeriodic(swigCPtr, this);
  }

  public void SetOrigin(int Index) {
    OccJavaJNI.Geom_BSplineCurve_SetOrigin__SWIG_0(swigCPtr, this, Index);
  }

  public void SetOrigin(double U, double Tol) {
    OccJavaJNI.Geom_BSplineCurve_SetOrigin__SWIG_1(swigCPtr, this, U, Tol);
  }

  public void SetNotPeriodic() {
    OccJavaJNI.Geom_BSplineCurve_SetNotPeriodic(swigCPtr, this);
  }

  public void SetPole(int Index, double[] P) {
    OccJavaJNI.Geom_BSplineCurve_SetPole__SWIG_0(swigCPtr, this, Index, P);
  }

  public void SetPole(int Index, double[] P, double Weight) {
    OccJavaJNI.Geom_BSplineCurve_SetPole__SWIG_1(swigCPtr, this, Index, P, Weight);
  }

  public void SetWeight(int Index, double Weight) {
    OccJavaJNI.Geom_BSplineCurve_SetWeight(swigCPtr, this, Index, Weight);
  }

  public void MovePoint(double U, double[] P, int Index1, int Index2, int FirstModifiedPole, int LastModifiedPole) {
    OccJavaJNI.Geom_BSplineCurve_MovePoint(swigCPtr, this, U, P, Index1, Index2, FirstModifiedPole, LastModifiedPole);
  }

  public void MovePointAndTangent(double U, double[] P, double[] Tangent, double Tolerance, int StartingCondition, int EndingCondition, int ErrorStatus) {
    OccJavaJNI.Geom_BSplineCurve_MovePointAndTangent(swigCPtr, this, U, P, Tangent, Tolerance, StartingCondition, EndingCondition, ErrorStatus);
  }

  public boolean IsCN(int N) {
	return OccJavaJNI.Geom_BSplineCurve_IsCN(swigCPtr, this, N);
}

  public boolean IsClosed() {
	return OccJavaJNI.Geom_BSplineCurve_IsClosed(swigCPtr, this);
}

  public boolean IsPeriodic() {
	return OccJavaJNI.Geom_BSplineCurve_IsPeriodic(swigCPtr, this);
}

  public boolean IsRational() {
	return OccJavaJNI.Geom_BSplineCurve_IsRational(swigCPtr, this);
}

  public GeomAbs_Shape Continuity() {
    return GeomAbs_Shape.swigToEnum(OccJavaJNI.Geom_BSplineCurve_Continuity(swigCPtr, this));
  }

  public int Degree() {
    return OccJavaJNI.Geom_BSplineCurve_Degree(swigCPtr, this);
  }

  public void D0(double U, double[] P) {
    OccJavaJNI.Geom_BSplineCurve_D0(swigCPtr, this, U, P);
  }

  public void D1(double U, double[] P, double[] V1) {
    OccJavaJNI.Geom_BSplineCurve_D1(swigCPtr, this, U, P, V1);
  }

  public void D2(double U, double[] P, double[] V1, double[] V2) {
    OccJavaJNI.Geom_BSplineCurve_D2(swigCPtr, this, U, P, V1, V2);
  }

  public void D3(double U, double[] P, double[] V1, double[] V2, double[] V3) {
    OccJavaJNI.Geom_BSplineCurve_D3(swigCPtr, this, U, P, V1, V2, V3);
  }

  public double[] DN(double U, int N) {
	return OccJavaJNI.Geom_BSplineCurve_DN(swigCPtr, this, U, N);
}

  public double[] LocalValue(double U, int FromK1, int ToK2) {
	return OccJavaJNI.Geom_BSplineCurve_LocalValue(swigCPtr, this, U, FromK1, ToK2);
}

  public void LocalD0(double U, int FromK1, int ToK2, double[] P) {
    OccJavaJNI.Geom_BSplineCurve_LocalD0(swigCPtr, this, U, FromK1, ToK2, P);
  }

  public void LocalD1(double U, int FromK1, int ToK2, double[] P, double[] V1) {
    OccJavaJNI.Geom_BSplineCurve_LocalD1(swigCPtr, this, U, FromK1, ToK2, P, V1);
  }

  public void LocalD2(double U, int FromK1, int ToK2, double[] P, double[] V1, double[] V2) {
    OccJavaJNI.Geom_BSplineCurve_LocalD2(swigCPtr, this, U, FromK1, ToK2, P, V1, V2);
  }

  public void LocalD3(double U, int FromK1, int ToK2, double[] P, double[] V1, double[] V2, double[] V3) {
    OccJavaJNI.Geom_BSplineCurve_LocalD3(swigCPtr, this, U, FromK1, ToK2, P, V1, V2, V3);
  }

  public double[] LocalDN(double U, int FromK1, int ToK2, int N) {
	return OccJavaJNI.Geom_BSplineCurve_LocalDN(swigCPtr, this, U, FromK1, ToK2, N);
}

  public double[] EndPoint() {
	return OccJavaJNI.Geom_BSplineCurve_EndPoint(swigCPtr, this);
}

  public int FirstUKnotIndex() {
    return OccJavaJNI.Geom_BSplineCurve_FirstUKnotIndex(swigCPtr, this);
  }

  public double FirstParameter() {
    return OccJavaJNI.Geom_BSplineCurve_FirstParameter(swigCPtr, this);
  }

  public double Knot(int Index) {
    return OccJavaJNI.Geom_BSplineCurve_Knot(swigCPtr, this, Index);
  }

  public void Knots(double[] K) {
    OccJavaJNI.Geom_BSplineCurve_Knots(swigCPtr, this, K);
  }

  public void KnotSequence(double[] K) {
    OccJavaJNI.Geom_BSplineCurve_KnotSequence(swigCPtr, this, K);
  }

  public int LastUKnotIndex() {
    return OccJavaJNI.Geom_BSplineCurve_LastUKnotIndex(swigCPtr, this);
  }

  public double LastParameter() {
    return OccJavaJNI.Geom_BSplineCurve_LastParameter(swigCPtr, this);
  }

  public void LocateU(double U, double ParametricTolerance, int I1, int I2, boolean WithKnotRepetition) {
    OccJavaJNI.Geom_BSplineCurve_LocateU__SWIG_0(swigCPtr, this, U, ParametricTolerance, I1, I2, WithKnotRepetition);
  }

  public void LocateU(double U, double ParametricTolerance, int I1, int I2) {
    OccJavaJNI.Geom_BSplineCurve_LocateU__SWIG_1(swigCPtr, this, U, ParametricTolerance, I1, I2);
  }

  public int Multiplicity(int Index) {
    return OccJavaJNI.Geom_BSplineCurve_Multiplicity(swigCPtr, this, Index);
  }

  public void Multiplicities(int[] M) {
    OccJavaJNI.Geom_BSplineCurve_Multiplicities(swigCPtr, this, M);
  }

  public int NbKnots() {
    return OccJavaJNI.Geom_BSplineCurve_NbKnots(swigCPtr, this);
  }

  public int NbPoles() {
    return OccJavaJNI.Geom_BSplineCurve_NbPoles(swigCPtr, this);
  }

  public double[] Pole(int Index) {
	return OccJavaJNI.Geom_BSplineCurve_Pole(swigCPtr, this, Index);
}

  public void Poles(double[] P) {
    OccJavaJNI.Geom_BSplineCurve_Poles(swigCPtr, this, P);
  }

  public double[] StartPoint() {
	return OccJavaJNI.Geom_BSplineCurve_StartPoint(swigCPtr, this);
}

  public double Weight(int Index) {
    return OccJavaJNI.Geom_BSplineCurve_Weight(swigCPtr, this, Index);
  }

  public void Weights(double[] W) {
    OccJavaJNI.Geom_BSplineCurve_Weights(swigCPtr, this, W);
  }

  public void Transform(GP_Trsf T) {
    OccJavaJNI.Geom_BSplineCurve_Transform(swigCPtr, this, GP_Trsf.getCPtr(T), T);
  }

  public int MaxDegree() {
    return OccJavaJNI.Geom_BSplineCurve_MaxDegree(swigCPtr, this);
  }

  public void Resolution(double Tolerance3D, double[] UTolerance) {
    OccJavaJNI.Geom_BSplineCurve_Resolution(swigCPtr, this, Tolerance3D, UTolerance);
  }

}
