/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.jcae.opencascade.jni;

public class Geom_OsculatingSurface {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public Geom_OsculatingSurface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Geom_OsculatingSurface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OccJavaJNI.delete_Geom_OsculatingSurface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Geom_OsculatingSurface() {
    this(OccJavaJNI.new_Geom_OsculatingSurface__SWIG_0(), true);
  }

  public Geom_OsculatingSurface(Geom_Surface BS, double Tol) {
    this(OccJavaJNI.new_Geom_OsculatingSurface__SWIG_1(Geom_Surface.getCPtr(BS), BS, Tol), true);
  }

  public void Init(Geom_Surface BS, double Tol) {
    OccJavaJNI.Geom_OsculatingSurface_Init(swigCPtr, this, Geom_Surface.getCPtr(BS), BS, Tol);
  }

  public Geom_Surface BasisSurface() {
    return new Geom_Surface(OccJavaJNI.Geom_OsculatingSurface_BasisSurface(swigCPtr, this), true);
  }

  public double Tolerance() {
    return OccJavaJNI.Geom_OsculatingSurface_Tolerance(swigCPtr, this);
  }

  public boolean UOscSurf(double U, double V, boolean t, Geom_BSplineSurface L) {
	return OccJavaJNI.Geom_OsculatingSurface_UOscSurf(swigCPtr, this, U, V, t, Geom_BSplineSurface.getCPtr(L), L);
}

  public boolean VOscSurf(double U, double V, boolean t, Geom_BSplineSurface L) {
	return OccJavaJNI.Geom_OsculatingSurface_VOscSurf(swigCPtr, this, U, V, t, Geom_BSplineSurface.getCPtr(L), L);
}

}
