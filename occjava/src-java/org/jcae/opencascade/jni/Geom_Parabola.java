/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.jcae.opencascade.jni;

public class Geom_Parabola extends Geom_Conic {
  private long swigCPtr;

  public Geom_Parabola(long cPtr, boolean cMemoryOwn) {
    super(OccJavaJNI.Geom_Parabola_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Geom_Parabola obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OccJavaJNI.delete_Geom_Parabola(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Geom_Parabola(GP_Parab Prb) {
    this(OccJavaJNI.new_Geom_Parabola__SWIG_0(GP_Parab.getCPtr(Prb), Prb), true);
  }

  public Geom_Parabola(double[] A2, double Focal) {
    this(OccJavaJNI.new_Geom_Parabola__SWIG_1(A2, Focal), true);
  }

  public Geom_Parabola(double[] D, double[] F) {
    this(OccJavaJNI.new_Geom_Parabola__SWIG_2(D, F), true);
  }

  public void SetFocal(double Focal) {
    OccJavaJNI.Geom_Parabola_SetFocal(swigCPtr, this, Focal);
  }

  public void SetParab(GP_Parab Prb) {
    OccJavaJNI.Geom_Parabola_SetParab(swigCPtr, this, GP_Parab.getCPtr(Prb), Prb);
  }

  public GP_Parab Parab() {
    return new GP_Parab(OccJavaJNI.Geom_Parabola_Parab(swigCPtr, this), true);
  }

  public double ReversedParameter(double U) {
    return OccJavaJNI.Geom_Parabola_ReversedParameter(swigCPtr, this, U);
  }

  public double FirstParameter() {
    return OccJavaJNI.Geom_Parabola_FirstParameter(swigCPtr, this);
  }

  public double LastParameter() {
    return OccJavaJNI.Geom_Parabola_LastParameter(swigCPtr, this);
  }

  public boolean IsClosed() {
	return OccJavaJNI.Geom_Parabola_IsClosed(swigCPtr, this);
}

  public boolean IsPeriodic() {
	return OccJavaJNI.Geom_Parabola_IsPeriodic(swigCPtr, this);
}

  public double[] Directrix() {
	return OccJavaJNI.Geom_Parabola_Directrix(swigCPtr, this);
}

  public double Eccentricity() {
    return OccJavaJNI.Geom_Parabola_Eccentricity(swigCPtr, this);
  }

  public double[] Focus() {
	return OccJavaJNI.Geom_Parabola_Focus(swigCPtr, this);
}

  public double Focal() {
    return OccJavaJNI.Geom_Parabola_Focal(swigCPtr, this);
  }

  public double Parameter() {
    return OccJavaJNI.Geom_Parabola_Parameter(swigCPtr, this);
  }

  public void D0(double U, double[] P) {
    OccJavaJNI.Geom_Parabola_D0(swigCPtr, this, U, P);
  }

  public void D1(double U, double[] P, double[] V1) {
    OccJavaJNI.Geom_Parabola_D1(swigCPtr, this, U, P, V1);
  }

  public void D2(double U, double[] P, double[] V1, double[] V2) {
    OccJavaJNI.Geom_Parabola_D2(swigCPtr, this, U, P, V1, V2);
  }

  public void D3(double U, double[] P, double[] V1, double[] V2, double[] V3) {
    OccJavaJNI.Geom_Parabola_D3(swigCPtr, this, U, P, V1, V2, V3);
  }

  public double[] DN(double U, int N) {
	return OccJavaJNI.Geom_Parabola_DN(swigCPtr, this, U, N);
}

  public void Transform(GP_Trsf T) {
    OccJavaJNI.Geom_Parabola_Transform(swigCPtr, this, GP_Trsf.getCPtr(T), T);
  }

  public double TransformedParameter(double U, GP_Trsf T) {
    return OccJavaJNI.Geom_Parabola_TransformedParameter(swigCPtr, this, U, GP_Trsf.getCPtr(T), T);
  }

  public double ParametricTransformation(GP_Trsf T) {
    return OccJavaJNI.Geom_Parabola_ParametricTransformation(swigCPtr, this, GP_Trsf.getCPtr(T), T);
  }

}
