/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.jcae.opencascade.jni;

public class Geom_BSplineSurface extends Geom_BoundedSurface {
  private long swigCPtr;

  public Geom_BSplineSurface(long cPtr, boolean cMemoryOwn) {
    super(OccJavaJNI.Geom_BSplineSurface_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Geom_BSplineSurface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OccJavaJNI.delete_Geom_BSplineSurface(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Geom_BSplineSurface(TColgp_Array2OfPnt Poles, double[] UKnots, double[] VKnots, int[] UMults, int[] VMults, int UDegree, int VDegree, boolean UPeriodic, boolean VPeriodic) {
    this(OccJavaJNI.new_Geom_BSplineSurface__SWIG_0(TColgp_Array2OfPnt.getCPtr(Poles), Poles, UKnots, VKnots, UMults, VMults, UDegree, VDegree, UPeriodic, VPeriodic), true);
  }

  public Geom_BSplineSurface(TColgp_Array2OfPnt Poles, double[] UKnots, double[] VKnots, int[] UMults, int[] VMults, int UDegree, int VDegree, boolean UPeriodic) {
    this(OccJavaJNI.new_Geom_BSplineSurface__SWIG_1(TColgp_Array2OfPnt.getCPtr(Poles), Poles, UKnots, VKnots, UMults, VMults, UDegree, VDegree, UPeriodic), true);
  }

  public Geom_BSplineSurface(TColgp_Array2OfPnt Poles, double[] UKnots, double[] VKnots, int[] UMults, int[] VMults, int UDegree, int VDegree) {
    this(OccJavaJNI.new_Geom_BSplineSurface__SWIG_2(TColgp_Array2OfPnt.getCPtr(Poles), Poles, UKnots, VKnots, UMults, VMults, UDegree, VDegree), true);
  }

  public Geom_BSplineSurface(TColgp_Array2OfPnt Poles, TColStd_Array2OfReal Weights, double[] UKnots, double[] VKnots, int[] UMults, int[] VMults, int UDegree, int VDegree, boolean UPeriodic, boolean VPeriodic) {
    this(OccJavaJNI.new_Geom_BSplineSurface__SWIG_3(TColgp_Array2OfPnt.getCPtr(Poles), Poles, TColStd_Array2OfReal.getCPtr(Weights), Weights, UKnots, VKnots, UMults, VMults, UDegree, VDegree, UPeriodic, VPeriodic), true);
  }

  public Geom_BSplineSurface(TColgp_Array2OfPnt Poles, TColStd_Array2OfReal Weights, double[] UKnots, double[] VKnots, int[] UMults, int[] VMults, int UDegree, int VDegree, boolean UPeriodic) {
    this(OccJavaJNI.new_Geom_BSplineSurface__SWIG_4(TColgp_Array2OfPnt.getCPtr(Poles), Poles, TColStd_Array2OfReal.getCPtr(Weights), Weights, UKnots, VKnots, UMults, VMults, UDegree, VDegree, UPeriodic), true);
  }

  public Geom_BSplineSurface(TColgp_Array2OfPnt Poles, TColStd_Array2OfReal Weights, double[] UKnots, double[] VKnots, int[] UMults, int[] VMults, int UDegree, int VDegree) {
    this(OccJavaJNI.new_Geom_BSplineSurface__SWIG_5(TColgp_Array2OfPnt.getCPtr(Poles), Poles, TColStd_Array2OfReal.getCPtr(Weights), Weights, UKnots, VKnots, UMults, VMults, UDegree, VDegree), true);
  }

  public void ExchangeUV() {
    OccJavaJNI.Geom_BSplineSurface_ExchangeUV(swigCPtr, this);
  }

  public void SetUPeriodic() {
    OccJavaJNI.Geom_BSplineSurface_SetUPeriodic(swigCPtr, this);
  }

  public void SetVPeriodic() {
    OccJavaJNI.Geom_BSplineSurface_SetVPeriodic(swigCPtr, this);
  }

  public void PeriodicNormalization(double U, double V) {
    OccJavaJNI.Geom_BSplineSurface_PeriodicNormalization(swigCPtr, this, U, V);
  }

  public void SetUOrigin(int Index) {
    OccJavaJNI.Geom_BSplineSurface_SetUOrigin(swigCPtr, this, Index);
  }

  public void SetVOrigin(int Index) {
    OccJavaJNI.Geom_BSplineSurface_SetVOrigin(swigCPtr, this, Index);
  }

  public void SetUNotPeriodic() {
    OccJavaJNI.Geom_BSplineSurface_SetUNotPeriodic(swigCPtr, this);
  }

  public void SetVNotPeriodic() {
    OccJavaJNI.Geom_BSplineSurface_SetVNotPeriodic(swigCPtr, this);
  }

  public void UReverse() {
    OccJavaJNI.Geom_BSplineSurface_UReverse(swigCPtr, this);
  }

  public void VReverse() {
    OccJavaJNI.Geom_BSplineSurface_VReverse(swigCPtr, this);
  }

  public double UReversedParameter(double U) {
    return OccJavaJNI.Geom_BSplineSurface_UReversedParameter(swigCPtr, this, U);
  }

  public double VReversedParameter(double V) {
    return OccJavaJNI.Geom_BSplineSurface_VReversedParameter(swigCPtr, this, V);
  }

  public void IncreaseDegree(int UDegree, int VDegree) {
    OccJavaJNI.Geom_BSplineSurface_IncreaseDegree(swigCPtr, this, UDegree, VDegree);
  }

  public void InsertUKnots(double[] Knots, int[] Mults, double ParametricTolerance, boolean Add) {
    OccJavaJNI.Geom_BSplineSurface_InsertUKnots__SWIG_0(swigCPtr, this, Knots, Mults, ParametricTolerance, Add);
  }

  public void InsertUKnots(double[] Knots, int[] Mults, double ParametricTolerance) {
    OccJavaJNI.Geom_BSplineSurface_InsertUKnots__SWIG_1(swigCPtr, this, Knots, Mults, ParametricTolerance);
  }

  public void InsertUKnots(double[] Knots, int[] Mults) {
    OccJavaJNI.Geom_BSplineSurface_InsertUKnots__SWIG_2(swigCPtr, this, Knots, Mults);
  }

  public void InsertVKnots(double[] Knots, int[] Mults, double ParametricTolerance, boolean Add) {
    OccJavaJNI.Geom_BSplineSurface_InsertVKnots__SWIG_0(swigCPtr, this, Knots, Mults, ParametricTolerance, Add);
  }

  public void InsertVKnots(double[] Knots, int[] Mults, double ParametricTolerance) {
    OccJavaJNI.Geom_BSplineSurface_InsertVKnots__SWIG_1(swigCPtr, this, Knots, Mults, ParametricTolerance);
  }

  public void InsertVKnots(double[] Knots, int[] Mults) {
    OccJavaJNI.Geom_BSplineSurface_InsertVKnots__SWIG_2(swigCPtr, this, Knots, Mults);
  }

  public boolean RemoveUKnot(int Index, int M, double Tolerance) {
	return OccJavaJNI.Geom_BSplineSurface_RemoveUKnot(swigCPtr, this, Index, M, Tolerance);
}

  public boolean RemoveVKnot(int Index, int M, double Tolerance) {
	return OccJavaJNI.Geom_BSplineSurface_RemoveVKnot(swigCPtr, this, Index, M, Tolerance);
}

  public void IncreaseUMultiplicity(int UIndex, int M) {
    OccJavaJNI.Geom_BSplineSurface_IncreaseUMultiplicity__SWIG_0(swigCPtr, this, UIndex, M);
  }

  public void IncreaseUMultiplicity(int FromI1, int ToI2, int M) {
    OccJavaJNI.Geom_BSplineSurface_IncreaseUMultiplicity__SWIG_1(swigCPtr, this, FromI1, ToI2, M);
  }

  public void IncrementUMultiplicity(int FromI1, int ToI2, int Step) {
    OccJavaJNI.Geom_BSplineSurface_IncrementUMultiplicity(swigCPtr, this, FromI1, ToI2, Step);
  }

  public void IncreaseVMultiplicity(int UIndex, int M) {
    OccJavaJNI.Geom_BSplineSurface_IncreaseVMultiplicity__SWIG_0(swigCPtr, this, UIndex, M);
  }

  public void IncreaseVMultiplicity(int FromI1, int ToI2, int M) {
    OccJavaJNI.Geom_BSplineSurface_IncreaseVMultiplicity__SWIG_1(swigCPtr, this, FromI1, ToI2, M);
  }

  public void IncrementVMultiplicity(int FromI1, int ToI2, int Step) {
    OccJavaJNI.Geom_BSplineSurface_IncrementVMultiplicity(swigCPtr, this, FromI1, ToI2, Step);
  }

  public void InsertUKnot(double U, int M, double ParametricTolerance, boolean Add) {
    OccJavaJNI.Geom_BSplineSurface_InsertUKnot__SWIG_0(swigCPtr, this, U, M, ParametricTolerance, Add);
  }

  public void InsertUKnot(double U, int M, double ParametricTolerance) {
    OccJavaJNI.Geom_BSplineSurface_InsertUKnot__SWIG_1(swigCPtr, this, U, M, ParametricTolerance);
  }

  public void InsertVKnot(double V, int M, double ParametricTolerance, boolean Add) {
    OccJavaJNI.Geom_BSplineSurface_InsertVKnot__SWIG_0(swigCPtr, this, V, M, ParametricTolerance, Add);
  }

  public void InsertVKnot(double V, int M, double ParametricTolerance) {
    OccJavaJNI.Geom_BSplineSurface_InsertVKnot__SWIG_1(swigCPtr, this, V, M, ParametricTolerance);
  }

  public void Segment(double U1, double U2, double V1, double V2) {
    OccJavaJNI.Geom_BSplineSurface_Segment(swigCPtr, this, U1, U2, V1, V2);
  }

  public void CheckAndSegment(double U1, double U2, double V1, double V2) {
    OccJavaJNI.Geom_BSplineSurface_CheckAndSegment(swigCPtr, this, U1, U2, V1, V2);
  }

  public void SetUKnot(int UIndex, double K) {
    OccJavaJNI.Geom_BSplineSurface_SetUKnot__SWIG_0(swigCPtr, this, UIndex, K);
  }

  public void SetUKnots(double[] UK) {
    OccJavaJNI.Geom_BSplineSurface_SetUKnots(swigCPtr, this, UK);
  }

  public void SetUKnot(int UIndex, double K, int M) {
    OccJavaJNI.Geom_BSplineSurface_SetUKnot__SWIG_1(swigCPtr, this, UIndex, K, M);
  }

  public void SetVKnot(int VIndex, double K) {
    OccJavaJNI.Geom_BSplineSurface_SetVKnot__SWIG_0(swigCPtr, this, VIndex, K);
  }

  public void SetVKnots(double[] VK) {
    OccJavaJNI.Geom_BSplineSurface_SetVKnots(swigCPtr, this, VK);
  }

  public void SetVKnot(int VIndex, double K, int M) {
    OccJavaJNI.Geom_BSplineSurface_SetVKnot__SWIG_1(swigCPtr, this, VIndex, K, M);
  }

  public void LocateU(double U, double ParametricTolerance, int I1, int I2, boolean WithKnotRepetition) {
    OccJavaJNI.Geom_BSplineSurface_LocateU__SWIG_0(swigCPtr, this, U, ParametricTolerance, I1, I2, WithKnotRepetition);
  }

  public void LocateU(double U, double ParametricTolerance, int I1, int I2) {
    OccJavaJNI.Geom_BSplineSurface_LocateU__SWIG_1(swigCPtr, this, U, ParametricTolerance, I1, I2);
  }

  public void LocateV(double V, double ParametricTolerance, int I1, int I2, boolean WithKnotRepetition) {
    OccJavaJNI.Geom_BSplineSurface_LocateV__SWIG_0(swigCPtr, this, V, ParametricTolerance, I1, I2, WithKnotRepetition);
  }

  public void LocateV(double V, double ParametricTolerance, int I1, int I2) {
    OccJavaJNI.Geom_BSplineSurface_LocateV__SWIG_1(swigCPtr, this, V, ParametricTolerance, I1, I2);
  }

  public void SetPole(int UIndex, int VIndex, double[] P) {
    OccJavaJNI.Geom_BSplineSurface_SetPole__SWIG_0(swigCPtr, this, UIndex, VIndex, P);
  }

  public void SetPole(int UIndex, int VIndex, double[] P, double Weight) {
    OccJavaJNI.Geom_BSplineSurface_SetPole__SWIG_1(swigCPtr, this, UIndex, VIndex, P, Weight);
  }

  public void SetPoleCol(int VIndex, double[] CPoles) {
    OccJavaJNI.Geom_BSplineSurface_SetPoleCol__SWIG_0(swigCPtr, this, VIndex, CPoles);
  }

  public void SetPoleCol(int VIndex, double[] CPoles, double[] CPoleWeights) {
    OccJavaJNI.Geom_BSplineSurface_SetPoleCol__SWIG_1(swigCPtr, this, VIndex, CPoles, CPoleWeights);
  }

  public void SetPoleRow(int UIndex, double[] CPoles, double[] CPoleWeights) {
    OccJavaJNI.Geom_BSplineSurface_SetPoleRow__SWIG_0(swigCPtr, this, UIndex, CPoles, CPoleWeights);
  }

  public void SetPoleRow(int UIndex, double[] CPoles) {
    OccJavaJNI.Geom_BSplineSurface_SetPoleRow__SWIG_1(swigCPtr, this, UIndex, CPoles);
  }

  public void SetWeight(int UIndex, int VIndex, double Weight) {
    OccJavaJNI.Geom_BSplineSurface_SetWeight(swigCPtr, this, UIndex, VIndex, Weight);
  }

  public void SetWeightCol(int VIndex, double[] CPoleWeights) {
    OccJavaJNI.Geom_BSplineSurface_SetWeightCol(swigCPtr, this, VIndex, CPoleWeights);
  }

  public void SetWeightRow(int UIndex, double[] CPoleWeights) {
    OccJavaJNI.Geom_BSplineSurface_SetWeightRow(swigCPtr, this, UIndex, CPoleWeights);
  }

  public void MovePoint(double U, double V, double[] P, int UIndex1, int UIndex2, int VIndex1, int VIndex2, int UFirstIndex, int ULastIndex, int VFirstIndex, int VLastIndex) {
    OccJavaJNI.Geom_BSplineSurface_MovePoint(swigCPtr, this, U, V, P, UIndex1, UIndex2, VIndex1, VIndex2, UFirstIndex, ULastIndex, VFirstIndex, VLastIndex);
  }

  public boolean IsUClosed() {
	return OccJavaJNI.Geom_BSplineSurface_IsUClosed(swigCPtr, this);
}

  public boolean IsVClosed() {
	return OccJavaJNI.Geom_BSplineSurface_IsVClosed(swigCPtr, this);
}

  public boolean IsCNu(int N) {
	return OccJavaJNI.Geom_BSplineSurface_IsCNu(swigCPtr, this, N);
}

  public boolean IsCNv(int N) {
	return OccJavaJNI.Geom_BSplineSurface_IsCNv(swigCPtr, this, N);
}

  public boolean IsUPeriodic() {
	return OccJavaJNI.Geom_BSplineSurface_IsUPeriodic(swigCPtr, this);
}

  public boolean IsURational() {
	return OccJavaJNI.Geom_BSplineSurface_IsURational(swigCPtr, this);
}

  public boolean IsVPeriodic() {
	return OccJavaJNI.Geom_BSplineSurface_IsVPeriodic(swigCPtr, this);
}

  public boolean IsVRational() {
	return OccJavaJNI.Geom_BSplineSurface_IsVRational(swigCPtr, this);
}

  public boolean IsCacheValid(double UParameter, double VParameter) {
	return OccJavaJNI.Geom_BSplineSurface_IsCacheValid(swigCPtr, this, UParameter, VParameter);
}

  public void Bounds(double[] U1, double[] U2, double[] V1, double[] V2) {
    OccJavaJNI.Geom_BSplineSurface_Bounds(swigCPtr, this, U1, U2, V1, V2);
  }

  public GeomAbs_Shape Continuity() {
    return GeomAbs_Shape.swigToEnum(OccJavaJNI.Geom_BSplineSurface_Continuity(swigCPtr, this));
  }

  public int FirstUKnotIndex() {
    return OccJavaJNI.Geom_BSplineSurface_FirstUKnotIndex(swigCPtr, this);
  }

  public int FirstVKnotIndex() {
    return OccJavaJNI.Geom_BSplineSurface_FirstVKnotIndex(swigCPtr, this);
  }

  public int LastUKnotIndex() {
    return OccJavaJNI.Geom_BSplineSurface_LastUKnotIndex(swigCPtr, this);
  }

  public int LastVKnotIndex() {
    return OccJavaJNI.Geom_BSplineSurface_LastVKnotIndex(swigCPtr, this);
  }

  public int NbUKnots() {
    return OccJavaJNI.Geom_BSplineSurface_NbUKnots(swigCPtr, this);
  }

  public int NbUPoles() {
    return OccJavaJNI.Geom_BSplineSurface_NbUPoles(swigCPtr, this);
  }

  public int NbVKnots() {
    return OccJavaJNI.Geom_BSplineSurface_NbVKnots(swigCPtr, this);
  }

  public int NbVPoles() {
    return OccJavaJNI.Geom_BSplineSurface_NbVPoles(swigCPtr, this);
  }

  public double[] Pole(int UIndex, int VIndex) {
	return OccJavaJNI.Geom_BSplineSurface_Pole(swigCPtr, this, UIndex, VIndex);
}

  public void Poles(TColgp_Array2OfPnt P) {
    OccJavaJNI.Geom_BSplineSurface_Poles(swigCPtr, this, TColgp_Array2OfPnt.getCPtr(P), P);
  }

  public int UDegree() {
    return OccJavaJNI.Geom_BSplineSurface_UDegree(swigCPtr, this);
  }

  public double UKnot(int UIndex) {
    return OccJavaJNI.Geom_BSplineSurface_UKnot(swigCPtr, this, UIndex);
  }

  public void UKnots(double[] Ku) {
    OccJavaJNI.Geom_BSplineSurface_UKnots(swigCPtr, this, Ku);
  }

  public void UKnotSequence(double[] Ku) {
    OccJavaJNI.Geom_BSplineSurface_UKnotSequence(swigCPtr, this, Ku);
  }

  public int UMultiplicity(int UIndex) {
    return OccJavaJNI.Geom_BSplineSurface_UMultiplicity(swigCPtr, this, UIndex);
  }

  public void UMultiplicities(int[] Mu) {
    OccJavaJNI.Geom_BSplineSurface_UMultiplicities(swigCPtr, this, Mu);
  }

  public int VDegree() {
    return OccJavaJNI.Geom_BSplineSurface_VDegree(swigCPtr, this);
  }

  public double VKnot(int VIndex) {
    return OccJavaJNI.Geom_BSplineSurface_VKnot(swigCPtr, this, VIndex);
  }

  public void VKnots(double[] Kv) {
    OccJavaJNI.Geom_BSplineSurface_VKnots(swigCPtr, this, Kv);
  }

  public void VKnotSequence(double[] Kv) {
    OccJavaJNI.Geom_BSplineSurface_VKnotSequence(swigCPtr, this, Kv);
  }

  public int VMultiplicity(int VIndex) {
    return OccJavaJNI.Geom_BSplineSurface_VMultiplicity(swigCPtr, this, VIndex);
  }

  public void VMultiplicities(int[] Mv) {
    OccJavaJNI.Geom_BSplineSurface_VMultiplicities(swigCPtr, this, Mv);
  }

  public double Weight(int UIndex, int VIndex) {
    return OccJavaJNI.Geom_BSplineSurface_Weight(swigCPtr, this, UIndex, VIndex);
  }

  public void Weights(TColStd_Array2OfReal W) {
    OccJavaJNI.Geom_BSplineSurface_Weights(swigCPtr, this, TColStd_Array2OfReal.getCPtr(W), W);
  }

  public void D0(double U, double V, double[] P) {
    OccJavaJNI.Geom_BSplineSurface_D0(swigCPtr, this, U, V, P);
  }

  public void D1(double U, double V, double[] P, double[] D1U, double[] D1V) {
    OccJavaJNI.Geom_BSplineSurface_D1(swigCPtr, this, U, V, P, D1U, D1V);
  }

  public void D2(double U, double V, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV) {
    OccJavaJNI.Geom_BSplineSurface_D2(swigCPtr, this, U, V, P, D1U, D1V, D2U, D2V, D2UV);
  }

  public void D3(double U, double V, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV, double[] D3U, double[] D3V, double[] D3UUV, double[] D3UVV) {
    OccJavaJNI.Geom_BSplineSurface_D3(swigCPtr, this, U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV);
  }

  public double[] DN(double U, double V, int Nu, int Nv) {
	return OccJavaJNI.Geom_BSplineSurface_DN(swigCPtr, this, U, V, Nu, Nv);
}

  public void LocalD0(double U, double V, int FromUK1, int ToUK2, int FromVK1, int ToVK2, double[] P) {
    OccJavaJNI.Geom_BSplineSurface_LocalD0(swigCPtr, this, U, V, FromUK1, ToUK2, FromVK1, ToVK2, P);
  }

  public void LocalD1(double U, double V, int FromUK1, int ToUK2, int FromVK1, int ToVK2, double[] P, double[] D1U, double[] D1V) {
    OccJavaJNI.Geom_BSplineSurface_LocalD1(swigCPtr, this, U, V, FromUK1, ToUK2, FromVK1, ToVK2, P, D1U, D1V);
  }

  public void LocalD2(double U, double V, int FromUK1, int ToUK2, int FromVK1, int ToVK2, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV) {
    OccJavaJNI.Geom_BSplineSurface_LocalD2(swigCPtr, this, U, V, FromUK1, ToUK2, FromVK1, ToVK2, P, D1U, D1V, D2U, D2V, D2UV);
  }

  public void LocalD3(double U, double V, int FromUK1, int ToUK2, int FromVK1, int ToVK2, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV, double[] D3U, double[] D3V, double[] D3UUV, double[] D3UVV) {
    OccJavaJNI.Geom_BSplineSurface_LocalD3(swigCPtr, this, U, V, FromUK1, ToUK2, FromVK1, ToVK2, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV);
  }

  public double[] LocalDN(double U, double V, int FromUK1, int ToUK2, int FromVK1, int ToVK2, int Nu, int Nv) {
	return OccJavaJNI.Geom_BSplineSurface_LocalDN(swigCPtr, this, U, V, FromUK1, ToUK2, FromVK1, ToVK2, Nu, Nv);
}

  public double[] LocalValue(double U, double V, int FromUK1, int ToUK2, int FromVK1, int ToVK2) {
	return OccJavaJNI.Geom_BSplineSurface_LocalValue(swigCPtr, this, U, V, FromUK1, ToUK2, FromVK1, ToVK2);
}

  public Geom_Curve UIso(double U) {
    return new Geom_Curve(OccJavaJNI.Geom_BSplineSurface_UIso__SWIG_0(swigCPtr, this, U), true);
  }

  public Geom_Curve VIso(double V) {
    return new Geom_Curve(OccJavaJNI.Geom_BSplineSurface_VIso__SWIG_0(swigCPtr, this, V), true);
  }

  public Geom_Curve UIso(double U, boolean CheckRational) {
    return new Geom_Curve(OccJavaJNI.Geom_BSplineSurface_UIso__SWIG_1(swigCPtr, this, U, CheckRational), true);
  }

  public Geom_Curve VIso(double V, boolean CheckRational) {
    return new Geom_Curve(OccJavaJNI.Geom_BSplineSurface_VIso__SWIG_1(swigCPtr, this, V, CheckRational), true);
  }

  public void Transform(GP_Trsf T) {
    OccJavaJNI.Geom_BSplineSurface_Transform(swigCPtr, this, GP_Trsf.getCPtr(T), T);
  }

  public int MaxDegree() {
    return OccJavaJNI.Geom_BSplineSurface_MaxDegree(swigCPtr, this);
  }

  public void Resolution(double Tolerance3D, double UTolerance, double VTolerance) {
    OccJavaJNI.Geom_BSplineSurface_Resolution(swigCPtr, this, Tolerance3D, UTolerance, VTolerance);
  }

}
