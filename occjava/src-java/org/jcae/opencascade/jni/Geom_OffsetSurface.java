/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.jcae.opencascade.jni;

public class Geom_OffsetSurface extends Geom_Surface {
  private long swigCPtr;

  public Geom_OffsetSurface(long cPtr, boolean cMemoryOwn) {
    super(OccJavaJNI.Geom_OffsetSurface_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Geom_OffsetSurface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OccJavaJNI.delete_Geom_OffsetSurface(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Geom_OffsetSurface(Geom_Surface S, double Offset) {
    this(OccJavaJNI.new_Geom_OffsetSurface(Geom_Surface.getCPtr(S), S, Offset), true);
  }

  public void SetBasisSurface(Geom_Surface S) {
    OccJavaJNI.Geom_OffsetSurface_SetBasisSurface(swigCPtr, this, Geom_Surface.getCPtr(S), S);
  }

  public void SetOffsetValue(double D) {
    OccJavaJNI.Geom_OffsetSurface_SetOffsetValue(swigCPtr, this, D);
  }

  public double Offset() {
    return OccJavaJNI.Geom_OffsetSurface_Offset(swigCPtr, this);
  }

  public Geom_Surface BasisSurface() {
    return new Geom_Surface(OccJavaJNI.Geom_OffsetSurface_BasisSurface(swigCPtr, this), true);
  }

  public void UReverse() {
    OccJavaJNI.Geom_OffsetSurface_UReverse(swigCPtr, this);
  }

  public double UReversedParameter(double U) {
    return OccJavaJNI.Geom_OffsetSurface_UReversedParameter(swigCPtr, this, U);
  }

  public void VReverse() {
    OccJavaJNI.Geom_OffsetSurface_VReverse(swigCPtr, this);
  }

  public double VReversedParameter(double V) {
    return OccJavaJNI.Geom_OffsetSurface_VReversedParameter(swigCPtr, this, V);
  }

  public void Bounds(double[] U1, double[] U2, double[] V1, double[] V2) {
    OccJavaJNI.Geom_OffsetSurface_Bounds(swigCPtr, this, U1, U2, V1, V2);
  }

  public GeomAbs_Shape Continuity() {
    return GeomAbs_Shape.swigToEnum(OccJavaJNI.Geom_OffsetSurface_Continuity(swigCPtr, this));
  }

  public boolean IsCNu(int N) {
	return OccJavaJNI.Geom_OffsetSurface_IsCNu(swigCPtr, this, N);
}

  public boolean IsCNv(int N) {
	return OccJavaJNI.Geom_OffsetSurface_IsCNv(swigCPtr, this, N);
}

  public boolean IsUClosed() {
	return OccJavaJNI.Geom_OffsetSurface_IsUClosed(swigCPtr, this);
}

  public boolean IsVClosed() {
	return OccJavaJNI.Geom_OffsetSurface_IsVClosed(swigCPtr, this);
}

  public boolean IsUPeriodic() {
	return OccJavaJNI.Geom_OffsetSurface_IsUPeriodic(swigCPtr, this);
}

  public double UPeriod() {
    return OccJavaJNI.Geom_OffsetSurface_UPeriod(swigCPtr, this);
  }

  public boolean IsVPeriodic() {
	return OccJavaJNI.Geom_OffsetSurface_IsVPeriodic(swigCPtr, this);
}

  public double VPeriod() {
    return OccJavaJNI.Geom_OffsetSurface_VPeriod(swigCPtr, this);
  }

  public Geom_Curve UIso(double U) {
    return new Geom_Curve(OccJavaJNI.Geom_OffsetSurface_UIso(swigCPtr, this, U), true);
  }

  public Geom_Curve VIso(double V) {
    return new Geom_Curve(OccJavaJNI.Geom_OffsetSurface_VIso(swigCPtr, this, V), true);
  }

  public void D0(double U, double V, double[] P) {
    OccJavaJNI.Geom_OffsetSurface_D0(swigCPtr, this, U, V, P);
  }

  public void D1(double U, double V, double[] P, double[] D1U, double[] D1V) {
    OccJavaJNI.Geom_OffsetSurface_D1__SWIG_0(swigCPtr, this, U, V, P, D1U, D1V);
  }

  public void D2(double U, double V, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV) {
    OccJavaJNI.Geom_OffsetSurface_D2__SWIG_0(swigCPtr, this, U, V, P, D1U, D1V, D2U, D2V, D2UV);
  }

  public void D3(double U, double V, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV, double[] D3U, double[] D3V, double[] D3UUV, double[] D3UVV) {
    OccJavaJNI.Geom_OffsetSurface_D3(swigCPtr, this, U, V, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV);
  }

  public double[] DN(double U, double V, int Nu, int Nv) {
	return OccJavaJNI.Geom_OffsetSurface_DN(swigCPtr, this, U, V, Nu, Nv);
}

  public void Value(double U, double V, double[] P, double[] Pbasis, double[] D1Ubasis, double[] D1Vbasis) {
    OccJavaJNI.Geom_OffsetSurface_Value(swigCPtr, this, U, V, P, Pbasis, D1Ubasis, D1Vbasis);
  }

  public void D1(double U, double V, double[] P, double[] Pbasis, double[] D1U, double[] D1V, double[] D1Ubasis, double[] D1Vbasis, double[] D2Ubasis, double[] D2Vbasis, double[] D2UVbasis) {
    OccJavaJNI.Geom_OffsetSurface_D1__SWIG_1(swigCPtr, this, U, V, P, Pbasis, D1U, D1V, D1Ubasis, D1Vbasis, D2Ubasis, D2Vbasis, D2UVbasis);
  }

  public void D2(double U, double V, double[] P, double[] Pbasis, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV, double[] D1Ubasis, double[] D1Vbasis, double[] D2Ubasis, double[] D2Vbasis, double[] D2UVbasis, double[] D3Ubasis, double[] D3Vbasis, double[] D3UUVbasis, double[] D3UVVbasis) {
    OccJavaJNI.Geom_OffsetSurface_D2__SWIG_1(swigCPtr, this, U, V, P, Pbasis, D1U, D1V, D2U, D2V, D2UV, D1Ubasis, D1Vbasis, D2Ubasis, D2Vbasis, D2UVbasis, D3Ubasis, D3Vbasis, D3UUVbasis, D3UVVbasis);
  }

  public void LocalD0(double U, double V, int USide, int VSide, double[] P) {
    OccJavaJNI.Geom_OffsetSurface_LocalD0(swigCPtr, this, U, V, USide, VSide, P);
  }

  public void LocalD1(double U, double V, int USide, int VSide, double[] P, double[] D1U, double[] D1V) {
    OccJavaJNI.Geom_OffsetSurface_LocalD1(swigCPtr, this, U, V, USide, VSide, P, D1U, D1V);
  }

  public void LocalD2(double U, double V, int USide, int VSide, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV) {
    OccJavaJNI.Geom_OffsetSurface_LocalD2(swigCPtr, this, U, V, USide, VSide, P, D1U, D1V, D2U, D2V, D2UV);
  }

  public void LocalD3(double U, double V, int USide, int VSide, double[] P, double[] D1U, double[] D1V, double[] D2U, double[] D2V, double[] D2UV, double[] D3U, double[] D3V, double[] D3UUV, double[] D3UVV) {
    OccJavaJNI.Geom_OffsetSurface_LocalD3(swigCPtr, this, U, V, USide, VSide, P, D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV);
  }

  public double[] LocalDN(double U, double V, int USide, int VSide, int Nu, int Nv) {
	return OccJavaJNI.Geom_OffsetSurface_LocalDN(swigCPtr, this, U, V, USide, VSide, Nu, Nv);
}

  public void Transform(GP_Trsf T) {
    OccJavaJNI.Geom_OffsetSurface_Transform(swigCPtr, this, GP_Trsf.getCPtr(T), T);
  }

  public void TransformParameters(double[] U, double[] V, GP_Trsf T) {
    OccJavaJNI.Geom_OffsetSurface_TransformParameters(swigCPtr, this, U, V, GP_Trsf.getCPtr(T), T);
  }

  public Geom_Surface Surface() {
    return new Geom_Surface(OccJavaJNI.Geom_OffsetSurface_Surface(swigCPtr, this), true);
  }

  public boolean UOsculatingSurface(double U, double V, boolean IsOpposite, Geom_BSplineSurface UOsculSurf) {
	return OccJavaJNI.Geom_OffsetSurface_UOsculatingSurface(swigCPtr, this, U, V, IsOpposite, Geom_BSplineSurface.getCPtr(UOsculSurf), UOsculSurf);
}

  public boolean VOsculatingSurface(double U, double V, boolean IsOpposite, Geom_BSplineSurface VOsculSurf) {
	return OccJavaJNI.Geom_OffsetSurface_VOsculatingSurface(swigCPtr, this, U, V, IsOpposite, Geom_BSplineSurface.getCPtr(VOsculSurf), VOsculSurf);
}

}
